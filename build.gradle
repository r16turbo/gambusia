/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'org.junit.platform.gradle.plugin'

version = '0.1.0'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

buildscript {
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'io.netty:netty-codec-mqtt:4.1.13.Final'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:20'

    // Use JUnit test framework
    testImplementation 'org.apache.logging.log4j:log4j-api:2.10.0'
    testImplementation 'io.netty:netty-handler:4.1.13.Final'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.0.2'
    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.0.2'
    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.10.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

